/*
# [Initialize Database Schema]
This script creates the complete database schema required for the Adnewo application. It sets up tables for user profiles, API credentials, campaigns, and generated scripts. It also configures a trigger to automatically create user profiles upon sign-up and implements Row Level Security (RLS) to ensure users can only access their own data.

## Query Description: This operation is structural and safe for an empty database. It will create four new tables (`profiles`, `api_credentials`, `campaigns`, `generated_scripts`), one function (`handle_new_user`), and one trigger (`on_auth_user_created`). If you have existing tables with these names, this script will fail. This script is designed to be run on a fresh or empty database schema.

## Metadata:
- Schema-Category: "Structural"
- Impact-Level: "High" (as it defines the entire schema)
- Requires-Backup: false (as it's for initial setup)
- Reversible: false (requires manual `DROP` statements)

## Structure Details:
- Tables created: `profiles`, `api_credentials`, `campaigns`, `generated_scripts`
- Functions created: `handle_new_user`
- Triggers created: `on_auth_user_created` on `auth.users`

## Security Implications:
- RLS Status: Enabled for all new tables.
- Policy Changes: Yes, new policies are created to restrict data access to the record owner.
- Auth Requirements: Policies rely on `auth.uid()` to identify the current user.

## Performance Impact:
- Indexes: Primary keys are created. Consider adding further indexes on `user_id` columns if performance becomes an issue.
- Triggers: Adds an `AFTER INSERT` trigger to `auth.users`, which has a negligible performance impact on user creation.
- Estimated Impact: Low.
*/

-- 1. PROFILES TABLE
-- Stores public user data.
CREATE TABLE public.profiles (
    id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    full_name text,
    updated_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.profiles IS 'Public profile information for each user.';

-- 2. API CREDENTIALS TABLE
-- Stores encrypted Adsterra API credentials for each user.
CREATE TABLE public.api_credentials (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    api_key_encrypted text NOT NULL,
    publisher_id text NOT NULL,
    endpoint text NOT NULL DEFAULT 'https://api.adsterra.com/v1',
    is_active boolean NOT NULL DEFAULT true,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.api_credentials IS 'Stores encrypted Adsterra API credentials for users.';

-- 3. CAMPAIGNS TABLE
-- Caches campaign data fetched from Adsterra.
CREATE TABLE public.campaigns (
    id text NOT NULL,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    name text NOT NULL,
    url text NOT NULL,
    cpm numeric NOT NULL,
    country text NOT NULL,
    device text NOT NULL,
    category text NOT NULL,
    status text NOT NULL,
    impressions integer NOT NULL DEFAULT 0,
    clicks integer NOT NULL DEFAULT 0,
    revenue numeric NOT NULL DEFAULT 0,
    is_selected boolean NOT NULL DEFAULT false,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    PRIMARY KEY (id, user_id)
);
COMMENT ON TABLE public.campaigns IS 'Caches Adsterra campaign data for each user.';

-- 4. GENERATED SCRIPTS TABLE
-- Stores popunder scripts generated by users.
CREATE TABLE public.generated_scripts (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    name text NOT NULL,
    script_code text NOT NULL,
    config jsonb NOT NULL,
    campaign_ids text[] NOT NULL,
    script_type text NOT NULL,
    created_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.generated_scripts IS 'Stores user-generated popunder scripts.';

-- 5. NEW USER TRIGGER FUNCTION
-- This function creates a profile entry for each new user.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name)
  VALUES (new.id, new.raw_user_meta_data->>'full_name');
  RETURN new;
END;
$$;
COMMENT ON FUNCTION public.handle_new_user() IS 'Creates a new profile for a new user.';

-- 6. AUTH TRIGGER
-- This trigger fires after a new user is created in auth.users.
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();
COMMENT ON TRIGGER on_auth_user_created ON auth.users IS 'When a user is created, create a profile for them.';

-- 7. ROW LEVEL SECURITY (RLS)
-- Enable RLS for all tables.
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.api_credentials ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.campaigns ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.generated_scripts ENABLE ROW LEVEL SECURITY;

-- RLS Policies for PROFILES
CREATE POLICY "Users can view their own profile."
  ON public.profiles FOR SELECT
  USING (auth.uid() = id);
CREATE POLICY "Users can update their own profile."
  ON public.profiles FOR UPDATE
  USING (auth.uid() = id);

-- RLS Policies for API_CREDENTIALS
CREATE POLICY "Users can manage their own API credentials."
  ON public.api_credentials FOR ALL
  USING (auth.uid() = user_id);

-- RLS Policies for CAMPAIGNS
CREATE POLICY "Users can manage their own campaigns."
  ON public.campaigns FOR ALL
  USING (auth.uid() = user_id);

-- RLS Policies for GENERATED_SCRIPTS
CREATE POLICY "Users can manage their own generated scripts."
  ON public.generated_scripts FOR ALL
  USING (auth.uid() = user_id);
